###############SQL-set1####################
##Sample Dataset-1

create table city(
  id int,
  name varchar(17),
  countrycode varchar(2),
  district varchar(20),
  population int
  );
  
insert into city values(6,"Rotterdam","NLD","Zuid-Holland",593321);
insert into city values(3878,"Scottsdale","USA","Arizona",202705);
insert into city values(3965,"Corona","USA","California",124966);
insert into city values(3973,"Concord","USA","California",121780);
insert into city values(3977,"Cedar Rapids","USA","ZIowa",120758);
insert into city values(3982,"Coral Springs","USA","Florida",117549);
insert into city values(4054,"Fairfield","USA","California",92256);
insert into city values(4058,"Boulder","USA","Colorado",91238);
insert into city values(4061,"Rotterdam","NLD","Massachusetts",90555);

-------------------------------------------------------------------------------------------------
Q1. Query all columns for all American cities in the CITY table with populations larger than 100000.The CountryCode for America is USA.
ans)select * from city where population > 100000 and countrycode = "USA";

Q2. Query the NAME field for all American cities in the CITY table with populations larger than 120000.The CountryCode for America is USA.
ans)select name from city where population > 120000;

Q3. Query all columns (attributes) for every row in the CITY table
ans)select * from city;

Q4. Query all columns for a city in CITY with the ID 1661
ans)select * from city where id = 1661; SQL query successfully executed. However, the result set is empty.

Q5. Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan isJPN.
ans)select * from city where countrycode = JPN;

Q6. Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.
ans)select district from city where countrycode = JPN;
----------------------------------------------------------------------------------------------------
##Sample Dataset-2

create table station(
  id int,
  city varchar(21),
  state varchar(2),
  LAT_N int,
  LONG_W int
  );
  
insert into station values(794,'Kissee Mills','MO',139,73);
insert into station values(824,'Loma Mar','CA',48,130);
insert into station values(603,'Sandy Hook','CT',72,148);
insert into station values(478,'Tipton','IN',33,97);
insert into station values(619,'Arlington','CO',75,92);
insert into station values(711,'Turner','AR',50,101);
insert into station values(839,'Slidell','LA',85,151);
insert into station values(411,'Negreet','LA',98,105);
insert into station values(588,'Glencoe','KY',46,136);
insert into station values(665,'Chelsea','IA',98,59);
insert into station values(342,'Chignik Lagoon','AK',103,153);
insert into station values(733,'Pelahatchie','MS',38,28);
insert into station values(441,'Hanna','City IL',50,136);
insert into station values(811,'Dorrance','KS',102,121);
insert into station values(698,'Albany','CA',49,80);
insert into station values(325,'Monument','KS',70,141);
insert into station values(414,'Manchester','MD',73,37);
insert into station values(113,'Prescott','IA',39,65);
insert into station values(971,'Graettinger','IA',94,150);
insert into station values(266,'Cahone','CO',116,127);
insert into station values(266,'Umerga','IND',116,127);
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q7. Query a list of CITY and STATE from the STATION table.
ans) select city,state from station;

Q8. Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.
ans) select distinct city as even_cities from station where id % 2 = 0;

Q9. Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.
ans) select (select count(city) from station) - (select count(distinct(city)) from station) as difference;

Q10. Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or
largest city, choose the one that comes first when ordered alphabetically.
ans) select city,length(city) as len from station order by len,city limit 1;
select city,length(city) as len from station order by len desc,city limit 1;

Q11. Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.
ans)select distinct(city) from station where lower(substr(city,1,1)) in ('a','e','i','o','u') ;
SELECT CITY FROM STATION where SUBSTR(CITY,1,1) IN('A','E','I','O','U');
SELECT DISTINCT CITY FROM STATION WHERE CITY LIKE 'A%' OR CITY LIKE 'E%' OR CITY LIKE 'I%' OR CITY LIKE 'O%' OR CITY LIKE 'U%';

Q12. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
ans)select city from station where city like '%A' or city like '%E' or city like '%I' or city like '%O' or city like '%U' ;
select city from station where lower(substr(city,length(city),length(city))) in ('a','e','i','o','u') ;

Q13. Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
ans)select distinct city from station where lower(substr(city,1,1)) not in ('a','e','i','o','u') ;

Q14. Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
ans)select distinct city from station where lower(substr(city,length(city),length(city))) not in ('a','e','i','o','u') ;

Q15. Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.
ans)select distinct city from station where lower(substr(city,1,1)) not in ('a','e','i','o','u') and lower(substr(city,length(city),length(city))) not in ('a','e','i','o','u') ;

Q16. Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.
ans)SELECT DISTINCT CITY FROM STATION WHERE LOWER(SUBSTR(CITY,1,1)) NOT IN ('a','e','i','o','u') AND LOWER(SUBSTR(CITY,LENGTH(CITY),1)) NOT IN ('a','e','i','o','u'); 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q17.Write an SQL query that reports the products that were only sold in the first quarter of 2019. That is,between 2019-01-01 and 2019-03-31 inclusive.
create table product(
  product_id int,
  product_name varchar,
  unit_price int,
  PRIMARY KEY (product_id)
  );

insert into product values(1,'S8',1000);
insert into product values(2,'G4',800);
insert into product values(3,'iphone',1400);

create table sales(
  seller_id int,
  product_id int,
  buyer_id int,
  sale_date date,
  quantity int,
  price int,
  FOREIGN KEY (product_id) REFERENCES product(product_id)
  );

insert into Sales values(1,1,1,'2019-01-21',2,2000);
insert into Sales values(1,2,2,'2019-02-17',1,800);
insert into Sales values(2,2,3,'2019-06-02',1,800);
insert into Sales values(3,3,4,'2019-05-13',2,2800);

ans)
1)select product_id,product_name
from product
where product_id not in (select product_id
                        from sales
                        where sale_date not between '2019-01-01' and '2019-03-31');
2)select p.product_id, p.product_name
from Product p
left join Sales s
on p.product_id = s.product_id
group by p.product_id
having sum(s.sale_date between '2019-01-01' and '2019-03-31') = count(s.sale_date);
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q18)Note that equal author_id and viewer_id indicate the same person.
Write an SQL query to find all the authors that viewed at least one of their own articles.
Return the result table sorted by id in ascending order.
The query result format is in the following example.

create table views(
  article_id int,
  author_id int,
  viewer_id int,
  view_date date
  );
insert into Views values(1, 3, 5, '2019-08-01');
insert into Views values(1, 3, 6, '2019-08-02');
insert into Views values(2, 7, 7, '2019-08-01');
insert into Views values(2, 7, 6, '2019-08-02');
insert into Views values(4, 7, 1, '2019-07-22');
insert into Views values(3, 4, 4, '2019-07-21');
insert into Views values(3, 4, 4, '2019-07-21');

ans)select distinct author_id as id from views where author_id=viewer_id order by id;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q19)The table holds information about food delivery to customers that make orders at some date and
specify a preferred delivery date (on the same order date or after it).
If the customer's preferred delivery date is the same as the order date, then the order is called
immediately; otherwise, it is called scheduled.
Write an SQL query to find the percentage of immediate orders in the table, rounded to 2 decimal
places.

create table Delivery(
  delivery_id int,
  customer_id int,
  order_date date,
  customer_pref_delivery_date date,
  primary key('delivery_id')
  );

insert into Delivery values(1, 1, '2019-08-01', '2019-08-02');
insert into Delivery values(2, 5, '2019-08-02', '2019-08-02');
insert into Delivery values(3, 1, '2019-08-11', '2019-08-11');
insert into Delivery values(4, 3, '2019-08-24', '2019-08-26');
insert into Delivery values(5, 4, '2019-08-21', '2019-08-22');
insert into Delivery values(6, 2, '2019-08-11', '2019-08-13');

ans)select round(sum(order_date=customer_pref_delivery_date)/count(1)*100) as immediate_percentage from delivery; (Not working)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q20)A company is running Ads and wants to calculate the performance of each Ad.
Performance of the Ad is measured using Click-Through Rate (CTR) where:
Write an SQL query to find the ctr of each Ad. Round ctr to two decimal points.
Return the result table ordered by ctr in descending order and by ad_id in ascending order in case of a
tie.
Explanation:
for ad_id = 1, ctr = (2/(2+1)) * 100 = 66.67
for ad_id = 2, ctr = (1/(1+2)) * 100 = 33.33
for ad_id = 3, ctr = (1/(1+1)) * 100 = 50.00
for ad_id = 5, ctr = 0.00, Note that ad_id = 5 has no clicks or views.
Note that we do not care about Ignored Ads.

create table ads(
  ad_id int,
  user_id int,
  action enum,
  primary key('ad_id','user_id')
  );

insert into ads values(');
insert into ads values(1, 1, 'Clicked');
insert into ads values(2, 2, 'Clicked');
insert into ads values(3, 3, 'Viewed');
insert into ads values(5, 5, 'Ignored');
insert into ads values(1, 7, 'Ignored');
insert into ads values(2, 7, 'Viewed');
insert into ads values(3, 5, 'Clicked');
insert into ads values(1, 4, 'Viewed');
insert into ads values(2, 11, 'Viewed');
insert into ads values(1, 2, 'Clicked');

ans)select ad_id,
ifnull(
    round(
        avg(
            case
                when action = "Clicked" then 1
                when action = "Viewed" then 0
                else null
            end
        ) * 100,
    2),
0)
as ctr
from Ads
group by ad_id
order by ctr desc, ad_id asc;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q21)Write an SQL query to find the team size of each of the employees. Return result table in any order.

create table Employee(
  employee_id int,
  team_id int,
  primary key('employee_id')
  );

insert into Employee values(');
insert into Employee values(1, 8);
insert into Employee values(2, 8);
insert into Employee values(3, 8);
insert into Employee values(4, 7);
insert into Employee values(5, 9);
insert into Employee values(6, 9);

ans)select e.employee_id, (select count(team_id) from Employee where e.team_id = team_id) as team_size from Employee e;
SELECT employee_id, COUNT(team_id) OVER (PARTITION BY team_id) team_sizeFROM Employee order by employee_id;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q22)Write an SQL query to find the type of weather in each country for November 2019.
The type of weather is:
● Cold if the average weather_state is less than or equal 15,
● Hot if the average weather_state is greater than or equal to 25, and
● Warm otherwise.

create table countries(
  country_id int,
  country_name varchar,
  primary key('country_id')
  );

insert into countries values(2, 'USA');
insert into countries values(3, 'Australia');
insert into countries values(7, 'Peru');
insert into countries values(5, 'China');
insert into countries values(8, 'Morocco');
insert into countries values(9, 'Spain');

create table weather(
  country_id int,
  weather_state int,
  day date,
  primary key('country_id','day')
  );

insert into weather values(2, 15, '2019-11-01');
insert into weather values(2, 12, '2019-10-28');
insert into weather values(2, 12, '2019-10-27');
insert into weather values(3, -2, '2019-11-10');
insert into weather values(3, 0, '2019-11-11');
insert into weather values(3, 3, '2019-11-12');
insert into weather values(5, 16, '2019-11-07');
insert into weather values(5, 18, '2019-11-09');
insert into weather values(5, 21, '2019-11-23');
insert into weather values(7, 25, '2019-11-28');
insert into weather values(7, 22, '2019-12-01');
insert into weather values(7, 20, '2019-12-02');
insert into weather values(8, 25, '2019-11-05');
insert into weather values(8, 27, '2019-11-15');
insert into weather values(8, 31, '2019-11-25');
insert into weather values(9, 7, '2019-10-23');
insert into weather values(9, 3, '2019-12-23');

ans)SELECT c.country_name,
       CASE
           WHEN AVG(w.weather_state * 1.0) <= 15.0 THEN 'Cold'
           WHEN AVG(w.weather_state * 1.0) >= 25.0 THEN 'Hot'
           ELSE 'Warm'
       END AS weather_type
FROM Countries AS c
INNER JOIN Weather AS w ON c.country_id = w.country_id
WHERE w.day BETWEEN '2019-11-01' AND '2019-11-30'
GROUP BY c.country_id;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q23)Write an SQL query to find the average selling price for each product. average_price should be rounded to 2 decimal places.

create table prices(
  product_id int,
  start_date date,
  end_date date,
  price int,
  primary key('product_id','start_date','end_date')
  );

insert into prices values(1, '2019-02-17', '2019-02-28', 5);
insert into prices values(1, '2019-03-01', '2019-03-22', 20);
insert into prices values(2, '2019-02-01', '2019-02-20', 15);
insert into prices values(2, '2019-02-21', '2019-03-31', 30);

create table UnitsSold(
  product_id int,
  purchase_date date,
  units int
  );

insert into UnitsSold values(1, '2019-02-25', 100);
insert into UnitsSold values(1, '2019-03-01', 15);
insert into UnitsSold values(2, '2019-02-10', 200);
insert into UnitsSold values(2, '2019-03-22', 30);

ans)SELECT
    p.product_id,
    IFNULL(ROUND(SUM(price * units) / SUM(units), 2), 0) AS average_price
FROM
    Prices AS p
    LEFT JOIN UnitsSold AS u
        ON p.product_id = u.product_id
where purchase_date BETWEEN start_date AND end_date
GROUP BY p.product_id;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q24)Write an SQL query to report the first login date for each player.Return the result table in any order.

create table Activity(
  player_id int,
  device_id int,
  event_date date,
  games_played int,
  primary key('player_id','event_date')
  );

insert into Activity values(1, 2, '2016-03-01', 5);
insert into Activity values(1, 2, '2016-05-02', 6);
insert into Activity values(2, 3, '2017-06-25', 1);
insert into Activity values(3, 1, '2016-03-02', 0);
insert into Activity values(3, 4, '2018-07-03', 5);

ans)SELECT player_id,MIN(event_date) as first_login FROM Activity GROUP BY player_id;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q25)Write an SQL query to report the device that is first logged in for each player.
ans1)SELECT
	player_id,
	device_id
FROM (
	 SELECT 
	 	player_id,
	 	device_id,
	 	event_date,
	 	MIN(event_date) OVER(PARTITION BY player_id ORDER BY event_date) as first_login
	 FROM Activity
 	) t1
 WHERE event_date = first_login;

ans2)SELECT
    player_id,
    device_id
FROM Activity
WHERE (player_id, event_date) IN (SELECT
                                        player_id,
                                        MIN(event_date) 
                                    FROM Activity 
                                    GROUP BY player_id)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q26)Write an SQL query to get the names of products that have at least 100 units ordered in February 2020 and their amount.

create table product(
  product_id int,
  product_name varchar,
  product_category varchar,
  primary key('product_id')
  );

insert into product values(1, 'Leetcode Solutions', 'Book');
insert into product values(2, 'Jewels of Stringology', 'Book');
insert into product values(3, 'HP', 'Laptop');
insert into product values(4, 'Lenovo', 'Laptop');
insert into product values(5, 'Leetcode Kit', 'T-shirt');

create table orders(
  product_id int,
  order_date date,
  unit int,
   foreign key('product_id') references product('product_id')
  );

insert into orders values(1, '2020-02-05', 60);
insert into orders values(1, '2020-02-10', 70);
insert into orders values(2, '2020-01-18', 30);
insert into orders values(2, '2020-02-11', 80);
insert into orders values(3, '2020-02-17', 2);
insert into orders values(3, '2020-02-24', 3);
insert into orders values(4, '2020-03-01', 20);
insert into orders values(4, '2020-03-04', 30);
insert into orders values(4, '2020-03-04', 60);
insert into orders values(5, '2020-02-25', 50);
insert into orders values(5, '2020-02-27', 50);
insert into orders values(5, '2020-03-01', 50);

ans)select prod.product_name,prod.unit
from 
    (select p.product_name,sum(o.unit) as unit
     from product p
     left join orders o on p.product_id=o.product_id
     where o.order_date between '2020-02-01' and '2020-02-28'
     group by p.product_id) prod
where prod.unit >=100;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q27)Write an SQL query to find the users who have valid emails.
A valid e-mail has a prefix name and a domain where:
● The prefix name is a string that may contain letters (upper or lower case), digits, underscore
'_', period '.', and/or dash '-'. The prefix name must start with a letter.
● The domain is '@leetcode.com'.


create table users(
  user_id int,
  name varchar,
  mail varchar,
  primary key ('user_id')
  );

insert into users values(1, 'Winston', 'winston@leetcode.com');
insert into users values(2, 'Jonathan', 'jonathanisgreat');
insert into users values(3, 'Annabelle', 'bella-@leetcode.com');
insert into users values(4, 'Sally', 'sally.come@leetcode.com');
insert into users values(5, 'Marwan', 'quarz#2020@leetcode.com');
insert into users values(6, 'David', 'david69@gmail.com');
insert into users values(7, 'Shapiro', '.shapo@leetcode.com');

ans)select * 
from Users
where  mail regexp '^[A-Za-z][A-Za-z0-9\_\.\-]*@leetcode\.com$';
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q28)Write an SQL query to report the customer_id and customer_name of customers who have spent at least $100 in each month of June and July 2020.

create table customers(
  customer_id int,
  name varchar,
  country varchar,
  primary key('customer_id')
  );

insert into customers values(1, 'Winston', 'USA');
insert into customers values(2, 'Jonathan', 'Peru');
insert into customers values(3, 'Moustafa', 'Egypt');

create table product(
  product_id int,
  description varchar,
  price int,
  primary key('product_id')
  );

insert into product values(10, 'LC Phone', 300);
insert into product values(20, 'LC T-Shirt', 10);
insert into product values(30, 'LC Book', 45);
insert into product values(40, 'LC Keychain', 2);

create table orders(
  order_id int,
  customer_id int,
  product_id int,
  order_date date,
  quantity int,
  primary key('order_id')
  );

insert into orders values(1, 1, 10, '2020-06-10', 1);
insert into orders values(2, 1, 20, '2020-07-01', 1);
insert into orders values(3, 1, 30, '2020-07-08', 2);
insert into orders values(4, 2, 10, '2020-06-15', 2);
insert into orders values(5, 2, 40, '2020-07-01', 10);
insert into orders values(6, 3, 20, '2020-06-24', 2);
insert into orders values(7, 3, 30, '2020-06-25', 2);
insert into orders values(9, 3, 30, '2020-05-08', 3);
insert into orders values(1, 1, 10, '2020-06-10', 1);
insert into orders values(2, 1, 20, '2020-07-01', 1);
insert into orders values(3, 1, 30, '2020-07-08', 2);
insert into orders values(4, 2, 10, '2020-06-15', 2);
insert into orders values(5, 2, 40, '2020-07-01', 10);
insert into orders values(6, 3, 20, '2020-06-24', 2);
insert into orders values(7, 3, 30, '2020-06-25', 2);
insert into orders values(9, 3, 30, '2020-05-08', 3);

ans)WITH result as (
SELECT 
    o.customer_id,
    c.name,
    DATE_FORMAT(o.order_date, '%Y-%m') as order_date, 
    SUM(quantity * price) as total_spend
FROM Orders as o JOIN Product as p
ON o.product_id = p.product_id
JOIN Customers as c
ON o.customer_id = c.customer_id
GROUP BY 1, 2, 3
ORDER BY 1
)

SELECT
    DISTINCT 
    customer_id,
    name
FROM result 
WHERE customer_id IN (SELECT customer_id FROM result 
		      WHERE order_date = '2020-06' 
                      AND total_spend >= 100)
AND customer_id IN (SELECT customer_id FROM result 
		    WHERE order_date = '2020-07' 
                    AND total_spend >= 100)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q29)Write an SQL query to report the distinct titles of the kid-friendly movies streamed in June 2020.

create table tvprogram(
  program_date date,
  content_id int,
  channel varchar,
  primary key('program_date','content_id')
  );

insert into tvprogram values('2020-06-10 08:00', 1, 'LC-Channel');
insert into tvprogram values('2020-05-11 12:00', 2, 'LC-Channel');
insert into tvprogram values('2020-05-12 12:00', 3, 'LC-Channel');
insert into tvprogram values('2020-05-13 14:00', 4, 'Disney Ch');
insert into tvprogram values('2020-06-18 14:00', 4, 'Disney Ch');
insert into tvprogram values('2020-07-15 16:00', 5, 'Disney Ch');

create table content(
  content_id varchar,
  title varchar,
  Kids_content enum,
  content_type varchar,
  primary key('content_id')
  );

insert into content values(1, 'Leetcode Movie', 'N', 'Movies');
insert into content values(2, 'Alg. for Kids', 'Y', 'Series');
insert into content values(3, 'Database Sols', 'N', 'Series');
insert into content values(4, 'Aladdin', 'Y', 'Movies');
insert into content values(5, 'Cinderella', 'Y', 'Movies');

ans)1)SELECT DISTINCT title
FROM content ctt
INNER JOIN TVProgram tv
ON ctt.content_id = tv.content_id
WHERE content_type = 'Movies'
AND Kids_content = 'Y'
AND program_date BETWEEN '2020-06-01' AND '2020-06-30';
2)select distinct title
from Content 
join TVProgram using(content_id)
where kids_content = 'Y' 
	and content_type = 'Movies' 
	and (month(program_date), year(program_date)) = (6, 2020);

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q30)Write an SQL query to find the npv of each query of the Queries table

create table mpv(
  id int,
  year int,
  npv int,
  primary key('id','year')
  );

insert into mpv values(1, 2018, 100);
insert into mpv values(7, 2020, 30);
insert into mpv values(13, 2019, 40);
insert into mpv values(1, 2019, 113);
insert into mpv values(2, 2008, 121);
insert into mpv values(3, 2009, 12);
insert into mpv values(11, 2020, 99);
insert into mpv values(7, 2019, 0);

create table queries(
  id int,
  year int,
  primary key('id','year')
  );

insert into queries values(1, 2019);
insert into queries values(2, 2008);
insert into queries values(3, 2009);
insert into queries values(7, 2018);
insert into queries values(7, 2019);
insert into queries values(7, 2020);
insert into queries values(13, 2019);

ans)select q.id,q.year,
ifnull(m.npv,0) as npv
from queries q
left join mpv m 
on q.id=m.id and q.year=m.year;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q32)Write an SQL query to show the unique ID of each user, If a user does not have a unique ID replace just show null.

create table employee(
  id int,
  name varchar,
  primary key('id')
  );

insert into employee values(1, 'Alice');
insert into employee values(7, 'Bob');
insert into employee values(11, 'Meir');
insert into employee values(90, 'Winston');
insert into employee values(3, 'Jonathan');

create table employeeuni(
  id int,
  unique_id int,
  primary key('id','unique_id')
  );

insert into employeeuni values(3, 1);
insert into employeeuni values(11, 2);
insert into employeeuni values(90, 3);

ans)select ifnull(employeeuni.unique_id,'null') as unique_id, employee.name
from employee
left join employeeuni on employeeuni.id=employee.id;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q33)Write an SQL query to report the distance travelled by each user.Return the result table ordered by travelled_distance in descending order, if two or more users
travelled the same distance, order them by their name in ascending order.

create table users(
  id int,
  name varchar,
  primary key('id')
  );

insert into users values(1, 'Alice');
insert into users values(2, 'Bob');
insert into users values(3, 'Alex');
insert into users values(4, 'Donald');
insert into users values(7, 'Lee');
insert into users values(13, 'Jonathan');
insert into users values(19, 'Elvis');

create table rides(
  id int,
  user_id int,
  distance int,
  primary key('id')
  );

insert into rides values(1, 1, 120);
insert into rides values(2, 2, 317);
insert into rides values(3, 3, 222);
insert into rides values(4, 7, 100);
insert into rides values(5, 13, 312);
insert into rides values(6, 19, 50);
insert into rides values(7, 7, 120);
insert into rides values(8, 19, 400);
insert into rides values(9, 7, 230);

ans)select u.name,ifnull(t.travelled_distance,0)
from users u
left join (select user_id,sum(distance) as travelled_distance from rides group by user_id) as t on u.id=t.user_id
order by t.travelled_distance desc,name;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q35)Write an SQL query to:
● Find the name of the user who has rated the greatest number of movies. In case of a tie,
return the lexicographically smaller user name.
● Find the movie name with the highest average rating in February 2020. In case of a tie, return
the lexicographically smaller movie name

create table movies(
  movie_id int,
  title varchar,
  primary key('movie_id')
  );

insert into movies values(1, 'Avengers');
insert into movies values(2, 'Frozen 2');
insert into movies values(3, 'Joker');

create table users(
  user_id int,
  name varchar,
  primary key('user_id')
  );

insert into users values(1, 'Daniel');
insert into users values(2, 'Monica');
insert into users values(3, 'Maria');
insert into users values(4, 'James');

create table movierating(
  movie_id int,
  user_id int,
  rating int,
  created_at date,
  primary key('movie_id','user_id')
  );

insert into movierating values(1, 1, 3, '2020-01-12');
insert into movierating values(1, 2, 4, '2020-02-11');
insert into movierating values(1, 3, 2, '2020-02-12');
insert into movierating values(1, 4, 1, '2020-01-01');
insert into movierating values(2, 1, 5, '2020-02-17');
insert into movierating values(2, 2, 2, '2020-02-01');
insert into movierating values(2, 3, 2, '2020-03-01');
insert into movierating values(3, 1, 3, '2020-02-22');
insert into movierating values(3, 2, 4, '2020-02-25');

ans)SELECT user_name AS results FROM
(
SELECT a.name AS user_name, COUNT(*) AS counts FROM MovieRating AS b
    JOIN Users AS a
    on a.user_id = b.user_id
    GROUP BY b.user_id
    ORDER BY counts DESC, user_name ASC LIMIT 1
) first_query
UNION
SELECT movie_name AS results FROM
(
SELECT c.title AS movie_name, AVG(d.rating) AS rate FROM MovieRating AS d
    JOIN Movies AS c
    on c.movie_id = d.movie_id
    WHERE substr(d.created_at, 1, 7) = '2020-02'
    GROUP BY d.movie_id
    ORDER BY rate DESC, movie_name ASC LIMIT 1
) second_query;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q38)Write an SQL query to find the id and the name of all students who are enrolled in departments that no longer exist.

create table departments(
  id int,
  name varchar,
  primary key('id')
  );

insert into departments values(1, 'Electrical Engineering');
insert into departments values(7, 'Computer Engineering');
insert into departments values(13, 'Business Administration');

create table students(
  id int,
  name varchar,
  department_id int,
  primary key('id')
  );

insert into students values(23, 'Alice', 1);
insert into students values(1, 'Bob', 7);
insert into students values(5, 'Jennifer', 13);
insert into students values(2, 'John', 14);
insert into students values(4, 'Jasmine', 77);
insert into students values(3, 'Steve', 74);
insert into students values(6, 'Luis', 1);
insert into students values(8, 'Jonathan', 7);
insert into students values(7, 'Daiana', 33);
insert into students values(11, 'Madelynn', 1);

ans)select id,name from students where department_id not in (select id from departments);
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q39)Write an SQL query to report the number of calls and the total call duration between each pair of distinct persons (person1, person2) where person1 < person2.


create table calls(
  from_id int,
  to_id int,
  duration int
  );

insert into calls values(1, 2, 59);
insert into calls values(2, 1, 11);
insert into calls values(1, 3, 20);
insert into calls values(3, 4, 100);
insert into calls values(3, 4, 200);
insert into calls values(3, 4, 200);
insert into calls values(4, 3, 499);

ans)1)SELECT
    IF(from_id < to_id, from_id, to_id) AS person1,
    IF(from_id < to_id, to_id, from_id) AS person2,
    COUNT(1) AS call_count,
    SUM(duration) AS total_duration
FROM Calls
GROUP BY 1, 2;

2)WITH caller as (
    select from_id as person1, to_id as person2, duration
    from Calls
    UNION ALL
    select to_id as person1, from_id as person2, duration
    from Calls
),

unique_caller as (
    select person1, person2, duration
    from caller
    where person1 < person2
)

select
    person1, person2, count(*) as call_count, sum(duration) as total_duration
from unique_caller
group by person1, person2
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q41)Write an SQL query to report the number of cubic feet of volume the inventory occupies in each warehouse.

create table warehouse(
  name varchar,
  product_id int,
  units int,
  primary key('name','product_id')
  );

insert into warehouse values('LCHouse1', 1, 1);
insert into warehouse values('LCHouse1', 2, 10);
insert into warehouse values('LCHouse1', 3, 5);
insert into warehouse values('LCHouse2', 1, 2);
insert into warehouse values('LCHouse2', 2, 2);
insert into warehouse values('LCHouse3', 4, 1);

create table products(
  product_id int,
  product_name varchar,
  Width int,
  Length int,
  Height int,
  primary key('product_id')
  );

insert into products values(1, 'LC-TV', 5, 50, 40);
insert into products values(2, 'LC-KeyChain', 5, 5, 5);
insert into products values(3, 'LC-Phone', 2, 10, 10);
insert into products values(4, 'LC-T-Shirt', 4, 10, 20);

ans)select w.name as warehouse_name, sum(w.units*(p.width*p.length*p.height)) as volume
from warehouse w
join products p on w.product_id=p.product_id
group by w.name;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q42)Write an SQL query to report the difference between the number of apples and oranges sold each day.Return the result table ordered by sale_date.

create table sales(
  sale_date date,
  fruit enum,
  sold_num int,
  primary key('sale_date','fruit')
  );

insert into sales values('2020-05-01', 'apples', 10);
insert into sales values('2020-05-01', 'oranges', 8);
insert into sales values('2020-05-02', 'apples', 15);
insert into sales values('2020-05-02', 'oranges', 15);
insert into sales values('2020-05-03', 'apples', 20);
insert into sales values('2020-05-03', 'oranges', 0);
insert into sales values('2020-05-04', 'apples', 15);
insert into sales values('2020-05-04', 'oranges', 16);

ans)select a.sale_date, (a.sold_num - b.sold_num) as diff
from Sales a 
left join Sales b 
on a.sale_date = b.sale_date
where a.fruit = 'apples' and b.fruit = 'oranges';
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q43)Write an SQL query to report the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places. In other words, you need to count the number of players
that logged in for at least two consecutive days starting from their first login date, then divide that number by the total number of players.


create table activity(
  player_id int,
  device_id int,
  event_date date,
  games_played int,
  primary key('player_id','event_date')
  );

insert into activity values(1, 2, '2016-03-01', 5);
insert into activity values(1, 2, '2016-03-02', 6);
insert into activity values(2, 3, '2017-06-25', 1);
insert into activity values(3, 1, '2016-03-02', 0);
insert into activity values(3, 4, '2018-07-03', 5);

ans)WITH cte AS (
SELECT player_id, MIN(event_date) as first_login
FROM Activity
GROUP BY player_id
)

SELECT ROUND(SUM(CASE WHEN DATEDIFF(event_date, first_login)=1 THEN 1 ELSE 0  END) / COUNT(DISTINCT cte.player_id), 2) as fraction
FROM Activity as a
JOIN cte 
ON a.player_id = cte.player_id
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q44)Write an SQL query to report the managers with at least five direct reports.Return the result table in any order.

create table employee(
  id int,
  name varchar,
  department varchar,
  managerId int,
  primary key('id')
  );

insert into employee values(101, 'John', 'A', 'None');
insert into employee values(102, 'Dan', 'A', 101);
insert into employee values(103, 'James', 'A', 101);
insert into employee values(104, 'Amy', 'A', 101);
insert into employee values(105, 'Anne', 'A', 101);
insert into employee values(106, 'Ron', 'B', 101);

ans)select Name from Employee
where Id in
(
  select ManagerId from Employee
  group by 1
  having count(*) >= 5
);
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q45)Write an SQL query to report the respective department name and number of students majoring in each department for all departments in the Department table (even ones with no current students).
Return the result table ordered by student_number in descending order. In case of a tie, order them by dept_name alphabetically.


create table students(
  student_id int,
  student_name varchar,
  gender varchar,
  dept_id int,
  primary key('student_id'),
  foreign key('dept_id') references department('dept_id')
  );

insert into students values(1, 'Jack', 'M', 1);
insert into students values(2, 'Jane', 'F', 1);
insert into students values(3, 'Mark', 'M', 2);

create table department(
  dept_id int,
  dept_name varchar,
  primary key('dept_id')
  );

insert into department values(1, 'Engineering');
insert into department values(2, 'Science');
insert into department values(3, 'Law');

ans)select d.dept_name,ifnull(Count(student_id),0) as student_number
from department d
left join students s
on d.dept_id=s.dept_id
group by s.dept_id
order by student_number desc,dept_name;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q46)Write an SQL query to report the customer ids from the Customer table that bought all the products in the Product table

create table customer(
  customer_id int,
  product_key int,
  foreign key('product_key') references product('product_key')
  );

insert into customer values(1, 5);
insert into customer values(2, 6);
insert into customer values(3, 5);
insert into customer values(3, 6);
insert into customer values(1, 6);

create table product(
  product_key int,
  primary key('product_key')
  );

insert into product values(5);
insert into product values(6);

ans)SELECT customer_id
FROM   customer
GROUP  BY customer_id
HAVING Count(DISTINCT product_key) = (SELECT Count(DISTINCT product_key) AS totl_prdct FROM   product);
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q47)Write an SQL query that reports the most experienced employees in each project. In case of a tie,report all employees with the maximum number of experience years.


create table project(
  project_id int,
  employee_id int,
  primary key('project_id','employee_id')
  foreign key('employee_id') references employee('employee_id')
  );

insert into project values(1, 1);
insert into project values(1, 2);
insert into project values(1, 3);
insert into project values(2, 1);
insert into project values(2, 4);


create table employee(
  employee_id int,
  name varchar,
  experience_years int,
  primary key('employee_id')
  );

insert into employee values(1, 'Khaled', 3);
insert into employee values(2, 'Ali', 2);
insert into employee values(3, 'John', 3);
insert into employee values(4, 'Doe', 2);

ans)1)select project_id, employee_id
from Project
join Employee
using (employee_id)
where (project_id, experience_years) in (
    select project_id, max(experience_years)
    from Project
    join Employee
    using (employee_id)
    group by project_id);

2)SELECT
    project_id,
    employee_id
FROM (
    SELECT
        p.project_id,
        p.employee_id,
        DENSE_RANK() OVER(PARTITION BY p.project_id ORDER BY e.experience_years DESC) 
        as maxexp
    FROM project as p JOIN employee as e
    ON p.employee_id = e.employee_id
    ) 
WHERE maxexp = 1;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q49)Write a SQL query to find the highest grade with its corresponding course for each student. In case of a tie, you should find the course with the smallest course_id.
Return the result table ordered by student_id in ascending order.

create table enrollments(
  student_id int,
  course_id int,
  grade int,
  primary key('student_id','course_id')
  );

insert into enrollments values(2, 2, 95);
insert into enrollments values(2, 3, 95);
insert into enrollments values(1, 1, 90);
insert into enrollments values(1, 2, 99);
insert into enrollments values(3, 1, 80);
insert into enrollments values(3, 2, 75);
insert into enrollments values(3, 3, 82);

ans)select student_id, min(course_id) as course_id, grade
from Enrollments
where (student_id, grade) in 
    (select student_id, max(grade)
    from Enrollments
    group by student_id)
group by student_id
order by student_id asc;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q50)The winner in each group is the player who scored the maximum total points within the group. In the case of a tie, the lowest player_id wins.
Write a solution to find the winner in each group.Return the result table in any order.

create table players(
  player_id int,
  group_id int,
  primary key('player_id')
  );

insert into players values(15,1);
insert into players values(25,1);
insert into players values(30,1);
insert into players values(45,1);
insert into players values(10,2);
insert into players values(35,2);
insert into players values(50,2);
insert into players values(20,3);
insert into players values(40,3);

create table matches(
  match_id  int,
  first_player  int,
  second_player  int,
  first_score  int,
  second_score  int,
  primary key('match_id')
  );

insert into matches values(1,15,45,3,0);
insert into matches values(2,30,25,1,2);
insert into matches values(3,30,15,2,0);
insert into matches values(4,40,20,5,2);
insert into matches values(5,35,50,1,1);

ans)
WITH
    s AS (
        SELECT first_player AS player_id, first_score AS score, group_id
        FROM
            Matches AS m
            JOIN Players AS p ON m.first_player = p.player_id
        UNION ALL
        SELECT second_player AS player_id, second_score AS score, group_id
        FROM
            Matches AS m
            JOIN Players AS p ON m.second_player = p.player_id
    ),
    t AS (
        SELECT group_id, player_id, SUM(score) AS scores
        FROM s
        GROUP BY player_id
    ),
    p AS (
        SELECT
            group_id,
            player_id,
            RANK() OVER (
                PARTITION BY group_id
                ORDER BY scores DESC, player_id
            ) AS rk
        FROM t
    )
SELECT group_id, player_id
FROM p
WHERE rk = 1;
